/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * DO NOT EDIT THIS DOCUMENT MANUALLY !!!
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE TOOLS UNDER
 *    AutoDetect/tools/
 */

package org.mozilla.intl.chardet;

import java.io.*;

public class CharsetDetector {

    private static boolean found = false;
    private static String result;

    public static String getCharset(final File file) throws Exception {
        if (file == null || !file.exists() || !file.isFile())
            return null;
        System.out.print("getCharset: " + file + "  ----- ");
        result = "UTF-8";
        nsDetector detector = new nsDetector(nsPSMDetector.ALL);
        detector.Init(charset -> {
//            System.out.println("observer: charset = " + charset + ", " + file);
            found = true;
            result = charset;
        });

        // URL url = new URL(argv[0]);
        BufferedInputStream imp = new BufferedInputStream(new FileInputStream(file));

        byte[] buf = new byte[1024];
        int len;
        boolean done = false;
        boolean isAscii = true;

        while ((len = imp.read(buf, 0, buf.length)) != -1) {

            // Check if the stream is only ascii.
            if (isAscii)
                isAscii = detector.isAscii(buf, len);

            // DoIt if non-ascii and not done yet.
            if (!isAscii && !done)
                done = detector.DoIt(buf, len, false);
        }
        detector.DataEnd();

        if (isAscii) {
            // System.out.println("CHARSET = ASCII" + ", " + file);
            found = true;
            result = "ASCII";
        }

        if (!found) {
            String prob[] = detector.getProbableCharsets();
            for (String aProb : prob) {
                System.out.print("Probable Charset = " + aProb + ", ");
                result = prob[0];
            }
        }
        System.out.println(result);
        return result;
    }

    public static void convert(File file, String fromEncoding, String toEncoding) throws Exception {
        if (file == null || !file.exists() || !file.isFile())
            return;
        System.out.println(file.getAbsolutePath() + " " + fromEncoding + "->" + toEncoding);
        InputStreamReader reader = new InputStreamReader(new FileInputStream(file), fromEncoding);
        char[] buffer = new char[102400];
        int n = reader.read(buffer);
        if (n < buffer.length) {
            reader.close();
            OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(file), toEncoding);
            writer.write(buffer, 0, n);
            writer.close();
        } else {
            reader.close();
        }
    }
}
